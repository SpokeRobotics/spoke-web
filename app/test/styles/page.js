import fs from 'fs'
import path from 'path'
import { Section, Box } from '@radix-ui/themes'
import TokensViewerClient from '../../components/TokensViewerClient.jsx'

function readJSON(filePath) {
  try {
    const raw = fs.readFileSync(filePath, 'utf-8')
    return JSON.parse(raw)
  } catch (e) {
    return { __error: e.message }
  }
}

function countTokens(obj) {
  if (!obj || typeof obj !== 'object') return 0
  let count = 0
  const stack = [obj]
  while (stack.length) {
    const cur = stack.pop()
    if (cur && typeof cur === 'object' && !Array.isArray(cur)) {
      count += Object.keys(cur).length
      for (const k of Object.keys(cur)) stack.push(cur[k])
    }
  }
  return count
}

function safePreview(obj, depth = 2) {
  if (depth === 0 || typeof obj !== 'object' || obj === null) return obj
  const out = {}
  for (const [k, v] of Object.entries(obj)) {
    if (typeof v === 'object') {
      out[k] = safePreview(v, depth - 1)
    } else {
      out[k] = v
    }
  }
  return out
}

export default async function StylesInspectorPage() {
  const exportsDir = path.join(process.cwd(), 'figma', 'exports')
  const files = {
    ColorScheme: path.join(exportsDir, 'ColorScheme.json'),
    Radius: path.join(exportsDir, 'Radius.json'),
    Scaling: path.join(exportsDir, 'Scaling.json'),
    Theme: path.join(exportsDir, 'Theme.json'),
  }

  const data = Object.fromEntries(
    Object.entries(files).map(([name, p]) => [name, readJSON(p)])
  )

  const stats = Object.fromEntries(
    Object.entries(data).map(([name, obj]) => [name, {
      hasError: !!obj?.__error,
      error: obj?.__error,
      tokenCount: countTokens(obj),
      topLevelKeys: obj && typeof obj === 'object' ? Object.keys(obj).slice(0, 25) : [],
      preview: safePreview(obj, 2),
    }])
  )

  // Optional curated usage report (generated by `npm run tokens:usage`)
  const usagePath = path.join(process.cwd(), 'figma', 'usage-report.json')
  let usage = null
  try {
    if (fs.existsSync(usagePath)) {
      usage = JSON.parse(fs.readFileSync(usagePath, 'utf-8'))
    }
  } catch (e) {
    usage = { __error: e.message }
  }

  // Read consolidated tokens and css variables
  const tokensPath = path.join(exportsDir, 'tokens.json')
  let tokensJson = {}
  try {
    if (fs.existsSync(tokensPath)) {
      tokensJson = JSON.parse(fs.readFileSync(tokensPath, 'utf-8'))
    }
  } catch (e) {
    tokensJson = { __error: e.message }
  }

  const cssVarsPath = path.join(process.cwd(), 'styles', 'figma-tokens.css')
  let cssVarsText = ''
  try {
    if (fs.existsSync(cssVarsPath)) {
      cssVarsText = fs.readFileSync(cssVarsPath, 'utf-8')
    }
  } catch (e) {
    cssVarsText = ''
  }

  return (
    <Section size="4">
      <Box mx="auto" style={{ maxWidth: 1200, width: '100%' }}>
        <TokensViewerClient
          tokensJson={tokensJson}
          cssVarsText={cssVarsText}
        />
      </Box>
    </Section>
  )
}
