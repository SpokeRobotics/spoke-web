import fs from 'fs'
import path from 'path'
import { Section, Box, Heading, Text, Code, Grid, Card } from '@radix-ui/themes'
import { Suspense } from 'react'
import StylesUsageClient from '../../components/StylesUsageClient.jsx'

function readJSON(filePath) {
  try {
    const raw = fs.readFileSync(filePath, 'utf-8')
    return JSON.parse(raw)
  } catch (e) {
    return { __error: e.message }
  }
}

function countTokens(obj) {
  if (!obj || typeof obj !== 'object') return 0
  let count = 0
  const stack = [obj]
  while (stack.length) {
    const cur = stack.pop()
    if (cur && typeof cur === 'object' && !Array.isArray(cur)) {
      count += Object.keys(cur).length
      for (const k of Object.keys(cur)) stack.push(cur[k])
    }
  }
  return count
}

function safePreview(obj, depth = 2) {
  if (depth === 0 || typeof obj !== 'object' || obj === null) return obj
  const out = {}
  for (const [k, v] of Object.entries(obj)) {
    if (typeof v === 'object') {
      out[k] = safePreview(v, depth - 1)
    } else {
      out[k] = v
    }
  }
  return out
}

export default async function StylesInspectorPage() {
  const exportsDir = path.join(process.cwd(), 'figma', 'exports')
  const files = {
    ColorScheme: path.join(exportsDir, 'ColorScheme.json'),
    Radius: path.join(exportsDir, 'Radius.json'),
    Scaling: path.join(exportsDir, 'Scaling.json'),
    Theme: path.join(exportsDir, 'Theme.json'),
  }

  const data = Object.fromEntries(
    Object.entries(files).map(([name, p]) => [name, readJSON(p)])
  )

  const stats = Object.fromEntries(
    Object.entries(data).map(([name, obj]) => [name, {
      hasError: !!obj?.__error,
      error: obj?.__error,
      tokenCount: countTokens(obj),
      topLevelKeys: obj && typeof obj === 'object' ? Object.keys(obj).slice(0, 25) : [],
      preview: safePreview(obj, 2),
    }])
  )

  // Optional curated usage report (generated by `npm run tokens:usage`)
  const usagePath = path.join(process.cwd(), 'figma', 'usage-report.json')
  let usage = null
  try {
    if (fs.existsSync(usagePath)) {
      usage = JSON.parse(fs.readFileSync(usagePath, 'utf-8'))
    }
  } catch (e) {
    usage = { __error: e.message }
  }

  return (
    <Section size="4">
      <Box mx="auto" style={{ maxWidth: 1200, width: '100%' }}>
        <Box mb="6">
          <Heading size="8" mb="2">Figma Tokens – Inspector</Heading>
          <Text as="p" color="gray" size="3" mb="3">
            Live view of exported token files from <Code>figma/exports/</Code>. This is for inspection only; curated views will come next.
          </Text>
        </Box>

        <Grid columns={{ initial: '1', sm: '2', lg: '3' }} gap="3">
          {Object.entries(stats).map(([name, info]) => (
            <Card key={name}>
              <Box p="4">
                <Heading size="5" mb="2">{name}.json</Heading>
                {info.hasError ? (
                  <Text color="red" size="2">Error: {info.error}</Text>
                ) : (
                  <>
                    <Text as="p" size="2" mb="2" color="gray">
                      Token count (approx, nested keys): {info.tokenCount}
                    </Text>
                    <Text as="p" size="2" mb="1">
                      Top-level keys: {info.topLevelKeys.length}
                    </Text>
                    <Text as="p" size="1" color="gray">Preview hidden</Text>
                  </>
                )}
              </Box>
            </Card>
          ))}
        </Grid>

        {/* Client-side usage summary (reads query params on the client) */}
        <Suspense fallback={<Box mt="7"><Text as="p" color="gray" size="3">Loading usage summary…</Text></Box>}>
          <StylesUsageClient usage={usage} />
        </Suspense>
      </Box>
    </Section>
  )
}
